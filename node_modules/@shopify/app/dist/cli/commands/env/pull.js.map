{"version":3,"file":"pull.js","sourceRoot":"","sources":["../../../../src/cli/commands/env/pull.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,gBAAgB,CAAA;AAEvC,OAAO,EAAC,IAAI,IAAI,OAAO,EAAC,MAAM,4BAA4B,CAAA;AAC1D,OAAO,EAAC,OAAO,EAAC,MAAM,4BAA4B,CAAA;AAClD,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AACjC,OAAO,EAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,kBAAkB,CAAA;AAClD,OAAO,OAAO,MAAM,oCAAoC,CAAA;AAExD,MAAM,CAAC,OAAO,OAAO,OAAQ,SAAQ,OAAO;IAgBnC,KAAK,CAAC,GAAG;QACd,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QACzC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;QACvE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAA;QAC1D,MAAM,GAAG,GAAiB,MAAM,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;QAC5D,MAAM,CAAC,IAAI,CAAC,MAAM,OAAO,CAAC,GAAG,EAAE,EAAC,OAAO,EAAC,CAAC,CAAC,CAAA;IAC5C,CAAC;;AArBM,mBAAW,GAAG,6DAA6D,CAAA;AAE3E,cAAM,GAAG,IAAI,CAAA;AAEb,aAAK,GAAG;IACb,GAAG,GAAG,CAAC,WAAW;IAClB,GAAG,QAAQ;IACX,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC;QACvB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,iEAAiE;QAC9E,GAAG,EAAE,uBAAuB;QAC5B,OAAO,EAAE,MAAM;KAChB,CAAC;CACH,CAAA","sourcesContent":["import {appFlags} from '../../flags.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {load as loadApp} from '../../models/app/loader.js'\nimport {pullEnv} from '../../services/env/pull.js'\nimport {Flags} from '@oclif/core'\nimport {output, path, cli} from '@shopify/cli-kit'\nimport Command from '@shopify/cli-kit/node/base-command'\n\nexport default class EnvPull extends Command {\n  static description = 'Pulls the environment variables for your app and extensions'\n\n  static hidden = true\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    'env-file': Flags.string({\n      hidden: false,\n      description: 'Specify an environment file to update if the update flag is set',\n      env: 'SHOPIFY_FLAG_ENV_FILE',\n      default: '.env',\n    }),\n  }\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(EnvPull)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const envFile = path.resolve(directory, flags['env-file'])\n    const app: AppInterface = await loadApp(directory, 'report')\n    output.info(await pullEnv(app, {envFile}))\n  }\n}\n"]}