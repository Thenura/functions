{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/bundle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAE,sBAAsB,EAAE,iBAAiB,EAAC,MAAM,uBAAuB,CAAA;AAGrG,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAQ,MAAM,kBAAkB,CAAA;AAC1D,OAAO,EAAC,GAAG,EAAC,MAAM,gCAAgC,CAAA;AAUlD,MAAM,CAAC,KAAK,UAAU,kCAAkC,CAAC,OAAsB;IAC7E,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;QACnD,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;QACjC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,CAAA;QAExD,MAAM,MAAM,CAAC,UAAU,CAAC;YACtB;gBACE,MAAM,EAAE,kBAAkB;gBAC1B,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAoB,EAAE,EAAE;oBACzE,MAAM,oBAAoB,CAAC;wBACzB,GAAG,EAAE,OAAO,CAAC,GAAG;wBAChB,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK;wBACxC,MAAM;wBACN,MAAM;wBACN,MAAM;qBACP,CAAC,CAAA;gBACJ,CAAC;aACF;YACD,GAAG,iBAAiB,CAAC;gBACnB,GAAG,EAAE;oBACH,GAAG,OAAO,CAAC,GAAG;oBACd,UAAU,EAAE;wBACV,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU;wBACzB,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;4BAChD,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,eAAe,CAAE,CAAA;4BAChF,MAAM,iBAAiB,GAAuB;gCAC5C,GAAG,WAAW;gCACd,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;6BACvG,CAAA;4BACD,OAAO,iBAAiB,CAAA;wBAC1B,CAAC,CAAC;qBACH;iBACF;aACF,CAAC;YACF,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE;gBAC3D,OAAO;oBACL,MAAM,EAAE,iBAAiB,CAAC,eAAe;oBACzC,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAoB,EAAE,EAAE;wBACzE,MAAM,sBAAsB,CAAC,iBAAiB,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAC,CAAC,CAAA;oBAC7F,CAAC;iBACF,CAAA;YACH,CAAC,CAAC;SACH,CAAC,CAAA;QAEF,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,MAAM,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,UAAU,CAAC,CAAA;SAC/C;IACH,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {buildThemeExtensions, buildFunctionExtension, buildUIExtensions} from '../build/extension.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {Identifiers} from '../../models/app/identifiers.js'\nimport {path, output, file, abort} from '@shopify/cli-kit'\nimport {zip} from '@shopify/cli-kit/node/archiver'\nimport {Writable} from 'node:stream'\n\ninterface BundleOptions {\n  app: AppInterface\n  bundlePath: string\n  identifiers: Identifiers\n  bundle: boolean\n}\n\nexport async function bundleUIAndBuildFunctionExtensions(options: BundleOptions) {\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const bundleDirectory = path.join(tmpDir, 'bundle')\n    await file.mkdir(bundleDirectory)\n    await file.touch(path.join(bundleDirectory, '.shopify'))\n\n    await output.concurrent([\n      {\n        prefix: 'theme_extensions',\n        action: async (stdout: Writable, stderr: Writable, signal: abort.Signal) => {\n          await buildThemeExtensions({\n            app: options.app,\n            extensions: options.app.extensions.theme,\n            stdout,\n            stderr,\n            signal,\n          })\n        },\n      },\n      ...buildUIExtensions({\n        app: {\n          ...options.app,\n          extensions: {\n            ...options.app.extensions,\n            ui: options.app.extensions.ui.map((uiExtension) => {\n              const extensionId = options.identifiers.extensions[uiExtension.localIdentifier]!\n              const mappedUIExtension: typeof uiExtension = {\n                ...uiExtension,\n                outputBundlePath: path.join(bundleDirectory, extensionId, path.basename(uiExtension.outputBundlePath)),\n              }\n              return mappedUIExtension\n            }),\n          },\n        },\n      }),\n      ...options.app.extensions.function.map((functionExtension) => {\n        return {\n          prefix: functionExtension.localIdentifier,\n          action: async (stdout: Writable, stderr: Writable, signal: abort.Signal) => {\n            await buildFunctionExtension(functionExtension, {stdout, stderr, signal, app: options.app})\n          },\n        }\n      }),\n    ])\n\n    if (options.bundle) {\n      await zip(bundleDirectory, options.bundlePath)\n    }\n  })\n}\n"]}